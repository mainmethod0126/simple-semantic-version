# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: gradle custom plugin release

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - uses: actions/checkout@v3


    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Grant execute permission to Gradle wrapper
      run: chmod +x ./gradlew

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

    - name: read version.json
      id: read_version
      shell: bash
      run: |
        echo "${{ github.workspace }}"

        cd ${{ github.workspace }}

        echo "ls $(ls ${{ github.workspace }})"

        # I have determined that there is no need to include metadata in the tagging information
        temp_major=`node -p "const p = require('${{ github.workspace }}/app/version.json'); p.major;"`
        temp_minor=`node -p "const p = require('${{ github.workspace }}/app/version.json'); p.minor;"`
        temp_patch=`node -p "const p = require('${{ github.workspace }}/app/version.json'); p.patch;"`
        temp_prereleaseVersion=`node -p "const p = require('${{ github.workspace }}/app/version.json'); p.prereleaseVersion;"`

        # The task involves adding both '.' and '-' to the string so that dots (.) and dashes (-) can be included when combining all version information.
        if [ "$temp_minor" != "" ]; then
          temp_minor=".${temp_minor}"
        fi

        if [ "$temp_patch" != "" ]; then
          temp_patch=".${temp_patch}"
        fi

        if [ "$temp_prereleaseVersion" != "" ]; then
          temp_prereleaseVersion="-${temp_prereleaseVersion}"
        fi

        echo "temp_major : $temp_major"
        echo "temp_minor : $temp_minor"
        echo "temp_patch : $temp_patch"
        echo "temp_prereleaseVersion : $temp_prereleaseVersion"

        version="$temp_major$temp_minor$temp_patch$temp_prereleaseVersion"
        echo "APPLICATION_VERSION=$version" >> $GITHUB_OUTPUT


    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with: 
        tag_name: ${{ steps.read_version.outputs.APPLICATION_VERSION }}
        release_name: ${{ steps.read_version.outputs.APPLICATION_VERSION }}
        prerelease: true


    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: "${{ github.workspace }}/app/dist/${{ steps.read_version.outputs.APPLICATION_VERSION }}/gradle-semantic-versioning-manager-plugin-${{ steps.read_version.outputs.APPLICATION_VERSION }}.jar"
        asset_name: gradle-semantic-versioning-manager-plugin-${{ steps.read_version.outputs.APPLICATION_VERSION }}.jar
        asset_content_type: application/jar
